{
  "ver": "1.0.27",
  "uuid": "d7a49f6b-5b44-4bc3-a386-bd6cb78e5370",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float wind_num;\nuniform float radian;\nuniform float value_1;\nuniform float value_2;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  float wind_x = -1.0 * wind_num  * cos( radian );\n  float height = 1.0 - v_uv0.y;\n  float offset_x = value_1 * pow(height, value_2) * wind_x;\n  float new_x =  v_uv0.x + offset_x;\n  float offset_y = pow(offset_x, 2.0)  *  2.0;\n  float new_y =  v_uv0.y - offset_y;\n  #if USE_TEXTURE\n  o *= texture2D(texture, fract(vec2(new_x, new_y)));\n    if(new_x <0.0 || new_x>1.0 || new_y<0.0){\n     o = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform inputData1{\n  float wind_num;\n};\nuniform inputData2{\n  float radian;\n};\nuniform inputData3{\n  float Flexibility;\n};\nuniform inputData4{\n  float value_1;\n};\nuniform inputData5{\n  float value_2;\n};\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  float wind_x = -1.0 * wind_num  * cos( radian );\n  float height = 1.0 - v_uv0.y;\n  float offset_x = value_1 * pow(height, value_2) * wind_x;\n  float new_x =  v_uv0.x + offset_x;\n  float offset_y = pow(offset_x, 2.0)  *  2.0;\n  float new_y =  v_uv0.y - offset_y;\n  #if USE_TEXTURE\n  o *= texture(texture, fract(vec2(new_x, new_y)));\n    if(new_x <0.0 || new_x>1.0 || new_y<0.0){\n     o = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}