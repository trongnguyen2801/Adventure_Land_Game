// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white } 
        alphaThreshold: { value: 0.5 }

        # time : {
        #         value: 0.0,
        #         editor: {
        #           tooltip: "时间"
        #         } 
        # } 
        wind_num: { 
                value: 1.0,
                editor: {
                  tooltip: "风力值"
                }
              }
        radian: { 
                value: 1.0,
                editor: {
                  tooltip: "旋转值"
                }
              }
        Flexibility: { value: 1.0,
                editor: {
                  tooltip: "柔韧度,数值越大越容易弯曲"
                }
              }
        value_1: {
                value: 0.5,
                editor: {
                  tooltip: "参数1"
                }
        }
        value_2: {
                value: 4.0,
                editor: {
                  tooltip: "参数2"
                }
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
 
  in vec4 v_color;
 
  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;

  // uniform inputData{
  //   float time;
  // };

  uniform inputData1{
    float wind_num;
  };

  uniform inputData2{
    float radian;
  };

  uniform inputData3{
    float Flexibility;
  };

  uniform inputData4{
    float value_1;
  };

  uniform inputData5{
    float value_2;
  };
 
  #endif
 

  void main () {
    vec4 o = vec4(1, 1, 1, 1);
 
    // 风吹植物变形算法
    // 一.脚本功能
    // 1.风力大小,方向角度
    // 2.材质柔韧性越小的,弯曲幅度越小
    // 二.shader功能
    // 1.表现弯曲方向一致,计算包含自身旋转
    // 2.素材要求完整正方形,防止动画裁切
    // 3.素材要求以底部为不动点,
    

    // 根据自身角度计算 风向量,风力值决定了最大点偏移多少

    float wind_x = -1.0 * wind_num  * cos( radian );
 
    //////////////////////// 弯曲算法: ____________________________

    // 获取v_uv0这个点距离中心点的真实距离
    float height = 1.0 - v_uv0.y;

  
    // 使用pow函数，让距离中心点越长的地方摆动幅度越明显且成抛物线形态(中心点以下部位不参与偏移)

    // x轴偏移量
    float offset_x = value_1 * pow(height, value_2) * wind_x;
    // x新的坐标
    float new_x =  v_uv0.x + offset_x;
    // 通过三角函数,计算出Y轴偏移量
    // y的新坐标
    float offset_y = pow(offset_x, 2.0)  *  2.0;

    float new_y =  v_uv0.y - offset_y;
 
    ////////////////////////风量抖动算法_____________________________




    ////////////////////////

    #if USE_TEXTURE
    // fract函数是GLSL内建函数，取小数部分
    o *= texture(texture, fract(vec2(new_x, new_y)));

      if(new_x <0.0 || new_x>1.0 || new_y<0.0){
       o = vec4(0.0, 0.0, 0.0, 0.0);
      }

      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif
 
    o *= v_color;
 
    ALPHA_TEST(o);


 
    gl_FragColor = o;
  }
}%
